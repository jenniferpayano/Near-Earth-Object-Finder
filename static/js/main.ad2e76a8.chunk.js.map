{"version":3,"sources":["apiConfig.js","components/shared/UserInput.js","components/routes/Home.js","api/EarthObject.js","App.js","reportWebVitals.js","index.js"],"names":["apiUrls","apiUrl","window","location","hostname","UserForm","earthObjects","handleSubmit","handleChange","className","onSubmit","required","type","name","value","startDate","onChange","endDate","TableRow","this","props","Number","Id","Name","Date","Diameter","Hazardous","Velocity","Component","Table","data","map","d","i","Distance","Home","event","updatedField","target","editedObject","Object","assign","state","setState","a","preventDefault","axios","url","method","then","res","neoFeedData","near_earth_objects","newAsteroids","keys","forEach","date","asteroid","push","length","id","close_approach_data","close_approach_date","parseInt","estimated_diameter","feet","estimated_diameter_min","toFixed","estimated_diameter_max","miss_distance","miles","is_potentially_hazardous_asteroid","toString","relative_velocity","miles_per_hour","asteroids","catch","err","console","log","earthObjectJsx","undefined","src","alt","routes","path","component","RouteWithSubRoutes","route","render","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ad2e76a8.chunk.js","sourcesContent":["let apiUrl\nconst apiUrls = {\n  production: 'https://api.nasa.gov/neo/rest/v1',\n  development: 'https://api.nasa.gov/neo/rest/v1'\n}\n\nif (window.location.hostname === 'localhost') {\n  apiUrl = apiUrls.development\n} else {\n  apiUrl = apiUrls.production\n}\n\nexport default apiUrl\n","import React from 'react'\nconst UserForm = ({ earthObjects, handleSubmit, handleChange }) => (\n  <div className=\"row\">\n    <div className=\"col-sm-10 col-md-8 mx-auto mt-5\">\n      <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label>Start Date: </label>\n            <input\n              required=\"required\"\n              type=\"date\"\n              className=\"form-control\"\n              name=\"startDate\"\n              value={earthObjects.startDate || ''}\n              onChange={handleChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label>End Date: </label>\n            <input\n              required=\"required\"\n              type=\"date\"\n              className=\"form-control\"\n              name=\"endDate\"\n              value={earthObjects.endDate || ''}\n              onChange={handleChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              value=\"Submit\"\n            />\n          </div>\n      </form>\n    </div>\n  </div>\n)\nexport default UserForm\n","import React, { Component } from 'react'\nimport { earthObjectShow } from '../../api/EarthObject'\nimport UserForm from '../shared/UserInput.js'\nclass TableRow extends Component {\n    render() {\n        return (\n            <tr>\n                <td>{this.props.Number}</td>\n                <td>{this.props.Id}</td>\n                <td>{this.props.Name}</td>\n                <td>{this.props.Date}</td>\n                <td>{this.props.Diameter}</td>\n                <td>{this.props.Hazardous}</td>\n                <td>{this.props.Velocity}</td>\n            </tr>)\n    }\n};\n\nclass Table extends Component {\n    constructor(props) {\n        super();\n    }\n    render() {\n        // let headings = Object.keys(this.props.data[0]);\n        return (\n            <div>\n                <table className=\"table\">\n                    <thead>\n                            <tr>\n                            <th>Number</th>\n                            <th>Id</th>\n                            <th>Name</th>\n                            <th>Date</th>\n                            <th>Diameter</th>\n                            <th>Hazardous</th>\n                            <th>Velocity</th>\n                            </tr>\n                        </thead>\n                    <tbody>\n                        {this.props.data.map(function (d, i) {\n                            return <TableRow key={'-' + i}\n                                Number={d.Number}\n                                Id={d.Id}\n                                Name={d.Name}\n                                Date= {d.Date}\n                                Diameter= {d.Diameter}\n                                Distance = {d.Distance}\n                                Hazardous = {d.Hazardous}\n                                Velocity = {d.Velocity}\n                            />\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nclass Home extends Component {\n    constructor() {\n        super()\n\n        this.state = {\n            earthObjects: {\n                startDate: '',\n                endDate: '',\n                asteroids: [\n                ]\n            }\n        }\n    }\n    handleChange = (event) => {\n        // create an object with the key/value of the field I'm typing in\n        const updatedField = {\n            [event.target.name]: event.target.value\n        }\n        const editedObject = Object.assign(this.state.earthObjects, updatedField)\n        this.setState({ earthObjects: editedObject })\n    }\n\n    onSubmit = async (event) => {\n        event.preventDefault()\n\n        earthObjectShow(this.state.earthObjects)\n            .then(res => {\n                let neoFeedData = res.data.near_earth_objects\n                let newAsteroids = []\n                Object.keys(neoFeedData).forEach((date) => {\n                    neoFeedData[date].forEach((asteroid) => {\n                        newAsteroids.push({\n                            Number: newAsteroids.length + 1,\n                            Id: asteroid.id,\n                            Name: asteroid.name,\n                            Date: asteroid.close_approach_data[0].close_approach_date,\n                            Diameter: parseInt(asteroid.estimated_diameter.feet.estimated_diameter_min.toFixed(0) + asteroid.estimated_diameter.feet.estimated_diameter_max.toFixed(0) / 2),\n                            Distance: parseInt(asteroid.close_approach_data[0].miss_distance.miles),\n                            Hazardous: asteroid.is_potentially_hazardous_asteroid.toString(),\n                            Velocity: parseInt(asteroid.close_approach_data[0].relative_velocity.miles_per_hour)\n                        })\n                    })\n                })\n                this.setState({ asteroids: newAsteroids })\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n    render() {\n        const { earthObjects } = this.state\n        earthObjects.asteroids = this.state.asteroids\n        let earthObjectJsx\n        // if asteroid list is not empty, set state to true \n        if(!earthObjects) {\n            earthObjectJsx = <img className=\"loading\" src=\"https://media.giphy.com/media/YMM6g7x45coCKdrDoj/giphy.gif\" alt=\"loading\"/>\n        } else if (earthObjects.asteroids !== undefined) {\n            earthObjectJsx = (\n                <div>\n                    <h1> New Earth Object </h1>\n                    <UserForm\n                        earthObjects={earthObjects}\n                        handleSubmit={this.onSubmit}\n                        handleChange={this.handleChange}\n                    />\n                    <h3>Total Number of objects: {earthObjects.asteroids.length} </h3>\n                    <Table data={earthObjects.asteroids} />\n                </div>\n            )\n        }\n        else {\n            earthObjectJsx = (\n                <div>\n                    <br />\n                    <h1> New Earth Object </h1>\n                    <UserForm\n                        earthObjects={earthObjects}\n                        handleSubmit={this.onSubmit}\n                        handleChange={this.handleChange}\n                    />\n                    <img className=\"loading\" src=\"https://media.giphy.com/media/YMM6g7x45coCKdrDoj/giphy.gif\" alt=\"loading\"/>\n                </div>\n                \n\n            );\n        }\n        return (\n            <div className=\"container\">\n                {earthObjectJsx}\n            </div>\n        )\n    }\n}\nexport default (Home)","import apiUrl from '../apiConfig'\nimport axios from 'axios'\n\nexport const earthObjectShow = (earthObjects) => {\n    return axios({\n      url: apiUrl + \"/feed?start_date=\" + earthObjects.startDate +\"&end_date=\" + earthObjects.endDate + \"&api_key=DEMO_KEY\",\n      method: 'GET'\n    })\n  }\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n} from \"react-router-dom\";\nimport Home from \"./components/routes/Home\";\n\nconst routes = [\n  {\n    path: '/',\n    component: Home\n  }\n];\nfunction RouteWithSubRoutes(route) {\n  return (\n    <Route\n      path={route.path}\n      render={props => (\n        // pass the sub-routes down to keep nesting\n        <route.component {...props} routes={route.routes} />\n      )}\n    />\n  );\n}\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <Routes>\n          {routes.map((route, i) => (\n            <RouteWithSubRoutes key={i} {...route} />\n          ))}\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}